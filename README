Berry is a minimal web framework written in Python.

The eventual goal for Berry is a minimal abstraction of WSGI which can be used
as part of a standard web framework stack that includes an ORM, views and so
on.

Example
-------

  import berry
  from berry import get
  
  @get('^$')
  def index(req):
    return "Welcome to the home page."
  
  @get('^hello/(.+)/?$')
  def hello(req, name):
    return "Hello, %s!" % name
  
  berry.start()

How to use it
-------------

  Decorate a function with berry.get(route) or berry.post(route) to serve
  GET/POST requests that match a route.  Routes must be regular expressions.
  Your function will be passed a Request object as the first argument.
  
  Example:
  
    @berry.get('^$')
    @berry.get('^home$')
    def home(req):
      return 'This is the home page.'
    
  As above, you can map multiple routes to the same function.
  
  Request objects
  ---------------
    
    Useful attributes of Request objects are:
    
      - env: the WSGI environ variable.
      - params: parameters passed through both GET and POST.
      - path: the path requested, minus the initial '/' and the query string
      - query: the query string, if any
      - fullpath: the full path requested, including the initial '/' and the
        query string
      - method: the method (GET or POST)
    
    Example:
    
      @berry.post('^login$')
      def login(req):
        username = berry.params['username']
        password = berry.params['password']
        # ...
    
  Handling errors
  ---------------
  
    Using the berry.error(code) decorator, you can make custom error pages.
    
    Example:
    
      @berry.error(404)
      def notfound(req):
        return "%s was not found." % req.fullpath
      
    Berry has Redirect, Forbidden, NotFound, and AppError classes, which
    are exceptions that inherit berry.HTTPError.  Just raise one of them:
    
      if not user.is_logged_in():
        raise berry.Forbidden()
    
    To add an exception for a new HTTP status code you can do something like:
    
      class Unauthorized(berry.HTTPError):
        status = (401, 'Unauthorized')
        content = "<h1>401 Unauthorized</h1>"
      
    Application errors
    ------------------
    
      If you set berry.debug = True, tracebacks will be outputted when there
      is an exception in your code.  Otherwise they will only be written to
      stderr.
    
    Redirecting
    -----------
    
      To redirect, raise the berry.Redirect exception:
      
        raise berry.Redirect(url)
      
      For convenience it has been wrapped in a redirect function:
      
        redirect(url)
    
    Logging
    -------
    
      All requests are logged to stdout and to berry.logfile, which by
      default is a temporary file with the prefix `berry-'.
      
  Headers
  -------
  
    To add HTTP headers, use the berry.header decorator:
    
      @berry.header('Content-Type', 'text/plain')
      def download_as_txt(req, id):
        # ...
      
    By default the Content-Type is set to 'text/html'.
    
  Using WSGI middleware
  ---------------------

    To use a WSGI middleware, use berry.use:

      berry.use(MyMiddleware, options_dict)

    The WSGI environ variable is available as the env attribute of the Request
    object.
  
  
  You can use something like Jinja, etc., for views and Beaker for sessions.
  Use nginx to serve static files.

How to install
--------------

  Berry uses the HTTP server in Paste, so you need to have that installed.
  
  If you have setuptools just do:
  
    easy_install berry
  
  You can get the latest release from:
  
    http://pypi.python.org/pypi/berry
  
  Or get the latest development snapshot with git:
  
    git clone git://github.com/adeel/berry.git
  
  Then:
  
    python setup.py install
  
  Please report any issues to adeel2 at umbc dot edu.
  
  Thanks!
